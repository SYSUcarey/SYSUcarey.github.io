<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on SYSUcarey</title>
    <link>https://sysucarey.github.io/post/</link>
    <description>Recent content in Posts on SYSUcarey</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Oct 2018 18:35:27 +0800</lastBuildDate>
    
	<atom:link href="https://sysucarey.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>手机平台应用开发week8报告</title>
      <link>https://sysucarey.github.io/%E6%89%8B%E6%9C%BA%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91week8%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Wed, 31 Oct 2018 18:35:27 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/%E6%89%8B%E6%9C%BA%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91week8%E6%8A%A5%E5%91%8A/</guid>
      <description>中山大学数据科学与计算机学院本科生实验报告 （2018年秋季学期）    课程名称 手机平台应用开发 任课老师 郑贵锋     年级 大三 专业（方向） 计应   学号 16340015 姓名 陈彬彬   电话 13590883387 Email 944131226@qq.com   开始日期 2018/10/30 完成日期 2018/10/30    一、实验题目 AppWidget 使用
二、实验目的  复习 Broadcast 编程基础。 复习动态注册 Broadcast 和静态注册 Broadcast 。 掌握 AppWidget 编程基础。  三、实现内容 在第七周任务的基础上，实现静态广播、动态广播两种改变widget内容的方法。
要求  widget初始情况如下：   点击widget可以启动应用，并在widget随机推荐一个食品。   点击widget跳转到所推荐食品的详情界面。   点击收藏图标，widget相应更新。   点击widget跳转到收藏列表。   实现方式要求:启动时的widget更新通过静态广播实现，点击收藏图标时的widget更新通过动态广播实现。  验收内容  布局显示是否正常。 静态广播：启动应用Widget是否有随机推荐食品。 动态广播：点击收藏图标后，Widget是否提示食品已加入收藏列表。 点击widget是否正确跳到对应的界面。 代码+实验报告（先在实验课上检查，检查后再pr）  四、实验结果 1.</description>
    </item>
    
    <item>
      <title>Git报错处理总结</title>
      <link>https://sysucarey.github.io/git%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 26 Oct 2018 15:00:00 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/git%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/</guid>
      <description> [TOC]
1.Git出现Fatal: TaskCanceledException encountered.的解决方法  设置全局配置helper为manager：  git config –global credential.helper manager  </description>
    </item>
    
    <item>
      <title>Leetcode581 Shortest Unsorted Continuous Subarray</title>
      <link>https://sysucarey.github.io/leetcode581-shortest-unsorted-continuous-subarray/</link>
      <pubDate>Fri, 26 Oct 2018 14:49:15 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode581-shortest-unsorted-continuous-subarray/</guid>
      <description>题目  链接：  Leetcode581 Shortest Unsorted Continuous Subarray
 概述：  Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.
You need to find the shortest such subarray and output its length.
Example 1:
 Input: [2, 6, 4, 8, 10, 9, 15] Output: 5 Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.</description>
    </item>
    
    <item>
      <title>Leetcode31 Next Permutation</title>
      <link>https://sysucarey.github.io/leetcode31-next-permutation/</link>
      <pubDate>Thu, 25 Oct 2018 20:30:53 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode31-next-permutation/</guid>
      <description>题目  链接：  Leetcode31 Next Permutation
 概述：  Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).
The replacement must be in-place and use only constant extra memory.
Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</description>
    </item>
    
    <item>
      <title>Git日常使用总结</title>
      <link>https://sysucarey.github.io/git%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 22 Oct 2018 23:31:34 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/git%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      <description> [TOC]
1.Git remote 修改 origin 源  查看当前remote配置：  git remote -v  删除原来git remote源：  git remote remove origin  添加新的 origin 源：  git remote add origin [YOUR_NEW_GIT_URL] 2.Git 查看提交记录日志  查看log命令：  git log  效果：   退出git log，键盘按q键即可。   3.Git 回退到某个commit  查看历史commit记录  git log  查看要回退commit版本的commit_id
 Git Bash命令：
  git reset --hard [commit_id] git push origin HEAD --force </description>
    </item>
    
    <item>
      <title>手机平台应用开发week7报告</title>
      <link>https://sysucarey.github.io/%E6%89%8B%E6%9C%BA%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91week7%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Mon, 22 Oct 2018 12:35:27 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/%E6%89%8B%E6%9C%BA%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91week7%E6%8A%A5%E5%91%8A/</guid>
      <description>中山大学数据科学与计算机学院本科生实验报告 （2018年秋季学期）    课程名称 手机平台应用开发 任课老师 郑贵锋     年级 大三 专业（方向） 计应   学号 16340015 姓名 陈彬彬   电话 13590883387 Email 944131226@qq.com   开始日期 2018/10/22 完成日期 2018/10/22    一、实验题目 Broadcast 使用
二、实验目的  掌握 Broadcast 编程基础。 掌握动态注册 Broadcast 和静态注册 Broadcast。 掌握Notification 编程基础。 掌握 EventBus 编程基础。  三、实现内容 在第六周任务的基础上，实现静态广播、动态广播两种改变Notification 内容的方法。
要求  在启动应用时，会有通知产生，随机推荐一个食品。   点击通知跳转到所推荐食品的详情界面。   点击收藏图标，会有对应通知产生，并通过Eventbus在收藏列表更新数据。   点击通知返回收藏列表。   实现方式要求:启动页面的通知由静态广播产生，点击收藏图标的通知由动态广播产生。  验收内容  静态广播：启动应用是否有随机推荐食品的通知产生。点击通知是否正确跳转到所推荐食品的详情界面。 动态广播：点击收藏后是否有提示食品已加入收藏列表的通知产生。同时注意设置launchMode。点击通知是否跳转到收藏列表。 Eventbus:点击收藏列表图标是否正确添加食品到收藏列表。每点击一次,添加对应的一个食品到收藏列表并产生一条通知。 代码+实验报告（都在实验课上检查，暂不需要pr）  四、实验结果 1.</description>
    </item>
    
    <item>
      <title>Leetcode57 Insert Interval</title>
      <link>https://sysucarey.github.io/leetcode57-insert-interval/</link>
      <pubDate>Thu, 18 Oct 2018 22:30:53 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode57-insert-interval/</guid>
      <description>题目  链接：  Leetcode57 Insert Interval
 概述：  Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
You may assume that the intervals were initially sorted according to their start times.
Example 1:
 Input: intervals = [[1,3],[6,9]], newInterval = [2,5] Output: [[1,5],[6,9]]  Example 2:
 Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8] Output: [[1,2],[3,10],[12,16]] Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].</description>
    </item>
    
    <item>
      <title>Leetcode56 Merge Intervals</title>
      <link>https://sysucarey.github.io/leetcode56-merge-intervals/</link>
      <pubDate>Sun, 14 Oct 2018 10:30:53 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode56-merge-intervals/</guid>
      <description>题目  链接：  Leetcode56 Merge Intervals
 概述：  Given a collection of intervals, merge all overlapping intervals.
Example 1:
 Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].  Example 2:
 Input: [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] are considerred overlapping.  思考 分析一：
 合并区间的操作在我们思考中是比较简单的，首先的第一步应该是排序操作，将区间的最小值为Key进行从小到大排序。然后就是从数组第一个区间开始判断到最后一个区间。具体对于自定义结构体的sort数组操作，类内和类外的区别等细节，参考博客。 如果前一个区间的最大值比后一个区间的最小值小，那么没有区间合并操作；如果前一个区间的最大值比后一个区间的最小值大，但比最大值小，那么区间合并成[前一个区间的最小值，后一个区间的最大值]；如果前一个区间的最大值比后一个区间的最大值都大，相当于后一个区间没有用，直接删去。 这样我们就可以得到Solution1，排序复杂度为O(nlogn)，一个for循环，O(n)。一开始我以为算法复杂度是O(nlogn)，但后来我发现错了，因为在数组中删去一个元素erase操作的复杂度为O(n)，所以总复杂度应该是O(n^2)，这样我们非但没有降低到我们想要的复杂度，而且还调用了很多erase操作，还有一个sort操作，还有数组的克隆操作，这样还是蛮慢的，可以预见到算法还有优化的空间。  分析二：
 我们考虑优化分析一，造成Solution1中复杂度升到O(n^2)的原因在于for循环中进行了删除元素的操作。那么我们考虑是否可以先判断完，再添加进answer数组，而不是一开始先复制后删除。 基于这样的考虑，我们可以先把intervals数组排序，然后先比较完是否需要进行合并区间，如果是需要合并的话，因为intervals已经基于区间start值排序了，那么也就是说要添加的新区间的start一定比answer中最后一个元素区间的start值要大，那么我们只需要修改answer中最后一个元素区间的end值；不需要合并的话，就直接把新区间添加进answer数组中即可。 这样我们就可以得到Solution2，复杂度为O(nlogn)。  解法 Solution1：</description>
    </item>
    
    <item>
      <title>手机平台应用开发week6报告</title>
      <link>https://sysucarey.github.io/%E6%89%8B%E6%9C%BA%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91week6%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sat, 13 Oct 2018 12:35:27 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/%E6%89%8B%E6%9C%BA%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91week6%E6%8A%A5%E5%91%8A/</guid>
      <description>中山大学数据科学与计算机学院本科生实验报告 （2018年秋季学期）    课程名称 手机平台应用开发 任课老师 郑贵锋     年级 大三 专业（方向） 计应   学号 16340015 姓名 陈彬彬   电话 13590883387 Email 944131226@qq.com   开始日期 2018/10/13 完成日期 2018/10/16    一、实验题目 Intent、Bundle的使用以及RecyclerView、ListView的应用
二、实验目的  复习事件处理。
 学习Intent、Bundle在Activity跳转中的应用。 学习RecyclerView、ListView以及各类适配器的用法。 学习FloatingActionBar的用法。  三、实现内容  本次实验模拟实现一个健康食品列表，有两个界面，第一个界面用于呈现食品列表 如下所示
数据在&amp;rdquo;manual/素材&amp;rdquo;目录下给出。
点击右下方的悬浮按钮可以切换到收藏夹
上面两个列表点击任意一项后，可以看到详细的信息：
  UI要求  食品列表
每一项为一个圆圈和一个名字，圆圈和名字都是垂直居中。圆圈内的内容是该食品的种类，内容要处于圆圈的中心，颜色为白色。食品名字为黑色，圆圈颜色自定义，只需能看见圆圈内的内容即可。 收藏夹
与食品列表相似 食品详情界面
 界面顶部
顶部占整个界面的1/3。每个食品详情的顶部颜色在数据中已给出。返回图标处于这块区域的左上角，食品名字处于左下角，星标处于右下角，边距可以自己设置。 返回图标与名字左对齐，名字与星标底边对齐。 建议用RelativeLayout实现，以熟悉RelativeLayout的使用。</description>
    </item>
    
    <item>
      <title>Leetcode18 4Sum</title>
      <link>https://sysucarey.github.io/leetcode18-4sum/</link>
      <pubDate>Sun, 07 Oct 2018 22:33:53 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode18-4sum/</guid>
      <description>题目  链接：  Leetcode18 4Sum
 概述：  Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b+ c + d = target? Find all unique quadruplets in the array which gives the sum of target.
Note:
The solution set must not contain duplicate quadruplets.
Example:
 Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.</description>
    </item>
    
  </channel>
</rss>