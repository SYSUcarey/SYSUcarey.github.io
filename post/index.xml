<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on SYSUcarey</title>
    <link>https://sysucarey.github.io/post/</link>
    <description>Recent content in Posts on SYSUcarey</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Oct 2018 23:31:34 +0800</lastBuildDate>
    
	<atom:link href="https://sysucarey.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git日常使用总结</title>
      <link>https://sysucarey.github.io/git%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 22 Oct 2018 23:31:34 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/git%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      <description> [TOC]
1.Git remote 修改 origin 源  查看当前remote配置：  git remote -v  删除原来git remote源：  git remote remove origin  添加新的 origin 源：  git remote add origin [YOUR_NEW_GIT_URL] 2.Git 查看提交记录日志  查看log命令：  git log  效果：  </description>
    </item>
    
    <item>
      <title>Leetcode57 Insert Interval</title>
      <link>https://sysucarey.github.io/leetcode57-insert-interval/</link>
      <pubDate>Thu, 18 Oct 2018 22:30:53 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode57-insert-interval/</guid>
      <description>题目  链接：  Leetcode57 Insert Interval
 概述：  Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
You may assume that the intervals were initially sorted according to their start times.
Example 1:
 Input: intervals = [[1,3],[6,9]], newInterval = [2,5] Output: [[1,5],[6,9]]  Example 2:
 Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8] Output: [[1,2],[3,10],[12,16]] Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].</description>
    </item>
    
    <item>
      <title>Leetcode56 Merge Intervals</title>
      <link>https://sysucarey.github.io/leetcode56-merge-intervals/</link>
      <pubDate>Sun, 14 Oct 2018 10:30:53 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode56-merge-intervals/</guid>
      <description>题目  链接：  Leetcode56 Merge Intervals
 概述：  Given a collection of intervals, merge all overlapping intervals.
Example 1:
 Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].  Example 2:
 Input: [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] are considerred overlapping.  思考 分析一：
 合并区间的操作在我们思考中是比较简单的，首先的第一步应该是排序操作，将区间的最小值为Key进行从小到大排序。然后就是从数组第一个区间开始判断到最后一个区间。具体对于自定义结构体的sort数组操作，类内和类外的区别等细节，参考博客。 如果前一个区间的最大值比后一个区间的最小值小，那么没有区间合并操作；如果前一个区间的最大值比后一个区间的最小值大，但比最大值小，那么区间合并成[前一个区间的最小值，后一个区间的最大值]；如果前一个区间的最大值比后一个区间的最大值都大，相当于后一个区间没有用，直接删去。 这样我们就可以得到Solution1，排序复杂度为O(nlogn)，一个for循环，O(n)。一开始我以为算法复杂度是O(nlogn)，但后来我发现错了，因为在数组中删去一个元素erase操作的复杂度为O(n)，所以总复杂度应该是O(n^2)，这样我们非但没有降低到我们想要的复杂度，而且还调用了很多erase操作，还有一个sort操作，还有数组的克隆操作，这样还是蛮慢的，可以预见到算法还有优化的空间。  分析二：
 我们考虑优化分析一，造成Solution1中复杂度升到O(n^2)的原因在于for循环中进行了删除元素的操作。那么我们考虑是否可以先判断完，再添加进answer数组，而不是一开始先复制后删除。 基于这样的考虑，我们可以先把intervals数组排序，然后先比较完是否需要进行合并区间，如果是需要合并的话，因为intervals已经基于区间start值排序了，那么也就是说要添加的新区间的start一定比answer中最后一个元素区间的start值要大，那么我们只需要修改answer中最后一个元素区间的end值；不需要合并的话，就直接把新区间添加进answer数组中即可。 这样我们就可以得到Solution2，复杂度为O(nlogn)。  解法 Solution1：</description>
    </item>
    
    <item>
      <title>手机平台应用开发week6报告</title>
      <link>https://sysucarey.github.io/%E6%89%8B%E6%9C%BA%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91week6%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sat, 13 Oct 2018 12:35:27 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/%E6%89%8B%E6%9C%BA%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91week6%E6%8A%A5%E5%91%8A/</guid>
      <description>中山大学数据科学与计算机学院本科生实验报告 （2018年秋季学期）    课程名称 手机平台应用开发 任课老师 郑贵锋     年级 大三 专业（方向） 计应   学号 16340015 姓名 陈彬彬   电话 13590883387 Email 944131226@qq.com   开始日期 2018/10/13 完成日期 2018/10/16    一、实验题目 Intent、Bundle的使用以及RecyclerView、ListView的应用
二、实验目的  复习事件处理。
 学习Intent、Bundle在Activity跳转中的应用。 学习RecyclerView、ListView以及各类适配器的用法。 学习FloatingActionBar的用法。  三、实现内容  本次实验模拟实现一个健康食品列表，有两个界面，第一个界面用于呈现食品列表 如下所示
数据在&amp;rdquo;manual/素材&amp;rdquo;目录下给出。
点击右下方的悬浮按钮可以切换到收藏夹
上面两个列表点击任意一项后，可以看到详细的信息：
  UI要求  食品列表
每一项为一个圆圈和一个名字，圆圈和名字都是垂直居中。圆圈内的内容是该食品的种类，内容要处于圆圈的中心，颜色为白色。食品名字为黑色，圆圈颜色自定义，只需能看见圆圈内的内容即可。 收藏夹
与食品列表相似 食品详情界面
 界面顶部
顶部占整个界面的1/3。每个食品详情的顶部颜色在数据中已给出。返回图标处于这块区域的左上角，食品名字处于左下角，星标处于右下角，边距可以自己设置。 返回图标与名字左对齐，名字与星标底边对齐。 建议用RelativeLayout实现，以熟悉RelativeLayout的使用。</description>
    </item>
    
    <item>
      <title>Leetcode18 4Sum</title>
      <link>https://sysucarey.github.io/leetcode18-4sum/</link>
      <pubDate>Sun, 07 Oct 2018 22:33:53 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode18-4sum/</guid>
      <description>题目  链接：  Leetcode18 4Sum
 概述：  Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b+ c + d = target? Find all unique quadruplets in the array which gives the sum of target.
Note:
The solution set must not contain duplicate quadruplets.
Example:
 Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.</description>
    </item>
    
    <item>
      <title>手机平台应用开发week5报告</title>
      <link>https://sysucarey.github.io/%E6%89%8B%E6%9C%BA%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91week5%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Sun, 07 Oct 2018 12:35:27 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/%E6%89%8B%E6%9C%BA%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91week5%E6%8A%A5%E5%91%8A/</guid>
      <description>中山大学数据科学与计算机学院本科生实验报告 （2018年秋季学期）    课程名称 手机平台应用开发 任课老师 郑贵锋     年级 大三 专业（方向） 计应   学号 16340015 姓名 陈彬彬   电话 13590883387 Email 944131226@qq.com   开始日期 2018/10/07 完成日期 2018/10/07    一、实验题目 基础的事件处理
二、实验目的  了解Android编程基础。
 熟悉Button、RadioButton、EditText等基本控件，能够处理这些控件的基本事件。
 学会弹出对话框，并定制对话框中的内容，能对确定和取消按钮的事件做处理。
  三、实现内容 实现一个Android应用，界面呈现如图中的效果。
要求
 该界面为应用启动后看到的第一个界面。
 各控件处理的要求  点击搜索按钮：  如果搜索内容为空，弹出Toast信息“搜索内容不能为空”。 如果搜索内容为“Health”，根据选中的RadioButton项弹出如下对话框。
点击“确定”，弹出Toast信息——对话框“确定”按钮被点击。
点击“取消”，弹出Toast 信息——对话框“取消”按钮被点击。
否则弹出如下对话框，对话框点击效果同上。
  RadioButton选择项切换：选择项切换之后，弹出Toast信息“XX被选中”，例如从图片切换到视频，弹出Toast信息“视频被选中”
   四、实验结果 (1)实验截图 实验效果图：</description>
    </item>
    
    <item>
      <title>Leetcode74 Search a 2D Matrix</title>
      <link>https://sysucarey.github.io/leetcode74-search-a-2d-matrix/</link>
      <pubDate>Thu, 04 Oct 2018 21:22:32 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode74-search-a-2d-matrix/</guid>
      <description>题目论述  链接：  Leetcode74 Search a 2D Matrix
 概述：  Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
 Integers in each row are sorted from left to right. The first integer of each row is greater than the last integer of the previous row.  Example 1:
 Input: matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] target = 3 Output: true  Example 2:</description>
    </item>
    
    <item>
      <title>Leetcode119 Pascal&#39;s Triangle II</title>
      <link>https://sysucarey.github.io/leetcode119-pascals-triangle-ii/</link>
      <pubDate>Tue, 02 Oct 2018 23:20:50 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode119-pascals-triangle-ii/</guid>
      <description>题目论述  链接：  Leetcode119 Pascal&amp;rsquo;s Triangle II
 概述：  Given a non-negative index k where k ≤ 33, return the k th index row of the Pascal&amp;rsquo;s triangle.
Note that the row index starts from 0.
In Pascal&amp;rsquo;s triangle, each number is the sum of the two numbers directly above it.
Example:
 Input: 3 Output: [1,3,3,1]  Follow up:
Could you optimize your algorithm to use only O(k) extra space?</description>
    </item>
    
    <item>
      <title>手机平台应用开发week4报告</title>
      <link>https://sysucarey.github.io/%E6%89%8B%E6%9C%BA%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91week4%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Mon, 01 Oct 2018 12:35:27 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/%E6%89%8B%E6%9C%BA%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91week4%E6%8A%A5%E5%91%8A/</guid>
      <description>中山大学数据科学与计算机学院本科生实验报告 （2018年秋季学期）    课程名称 手机平台应用开发 任课老师 郑贵锋     年级 大三 专业（方向） 计应   学号 16340015 姓名 陈彬彬   电话 13590883387 Email 944131226@qq.com   开始日期 2018/10/01 完成日期 2018/10/01    一、实验题目 基本的UI界面设计
二、实验目的  熟悉Android Studio开发工具操作。
 熟悉Android Studio基本UI开发，并进行UI基本设计。
  三、实现内容 实现一个Android应用，界面呈现如图中的效果。
要求  该界面为应用启动后看到的第一个界面。
 各控件的要求  标题字体大小20sp，与顶部距离20dp，居中； 图片与上下控件的间距均为20dp，居中；
 输入框整体距左右屏幕各间距20dp，内容（包括提示内容）如图所示，内容字体大小18sp；
 按钮与输入框间距10dp，文字大小18sp。按钮背景框左右边框与文字间距10dp，上下边框与文字间距5dp，圆角半径180dp，背景色为#3F51B5；
 四个单选按钮整体居中，与输入框间距10dp，字体大小18sp，各个单选按钮之间间距10dp，默认选中的按钮为第一个。   使用的组件 TextView、EditText、ConstraintLayout、Button、ImageView、RadioGroup、RadioButton。</description>
    </item>
    
    <item>
      <title>Leetcode15 3Sum</title>
      <link>https://sysucarey.github.io/leetcode15-3sum/</link>
      <pubDate>Sun, 30 Sep 2018 22:25:53 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode15-3sum/</guid>
      <description>题目论述  链接：  Leetcode15 3Sum
 概述：  Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Note:
The solution set must not contain duplicate triplets.
Example:
 Given array nums = [-1, 0, 1, 2, -1, -4], A solution set is: [ [-1, 0, 1], [-1, -1, 2] ]  思考分析 分析一：</description>
    </item>
    
  </channel>
</rss>