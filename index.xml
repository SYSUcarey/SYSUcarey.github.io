<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SYSUcarey</title>
    <link>https://sysucarey.github.io/</link>
    <description>Recent content on SYSUcarey</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Oct 2018 23:31:34 +0800</lastBuildDate>
    
        <atom:link href="https://sysucarey.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Git日常使用总结</title>
      <link>https://sysucarey.github.io/git%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 22 Oct 2018 23:31:34 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/git%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      <description> Git remote 修改 origin 源  查看当前remote配置：  git remote -v  删除原来git remote源  git remote remove origin  添加新的 origin 源  git remote add origin [YOUR_NEW_GIT_URL]</description>
    </item>
    
    
    
    <item>
      <title>Leetcode57 Insert Interval</title>
      <link>https://sysucarey.github.io/leetcode57-insert-interval/</link>
      <pubDate>Thu, 18 Oct 2018 22:30:53 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode57-insert-interval/</guid>
      <description>题目  链接：  Leetcode57 Insert Interval
 概述：  Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
You may assume that the intervals were initially sorted according to their start times.
Example 1:
 Input: intervals = [[1,3],[6,9]], newInterval = [2,5] Output: [[1,5],[6,9]]  Example 2:
 Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8] Output: [[1,2],[3,10],[12,16]] Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].</description>
    </item>
    
    
    
    <item>
      <title>Leetcode56 Merge Intervals</title>
      <link>https://sysucarey.github.io/leetcode56-merge-intervals/</link>
      <pubDate>Sun, 14 Oct 2018 10:30:53 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode56-merge-intervals/</guid>
      <description>题目  链接：  Leetcode56 Merge Intervals
 概述：  Given a collection of intervals, merge all overlapping intervals.
Example 1:
 Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].  Example 2:
 Input: [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] are considerred overlapping.  思考 分析一：
 合并区间的操作在我们思考中是比较简单的，首先的第一步应该是排序操作，将区间的最小值为Key进行从小到大排序。然后就是从数组第一个区间开始判断到最后一个区间。具体对于自定义结构体的sort数组操作，类内和类外的区别等细节，参考博客。 如果前一个区间的最大值比后一个区间的最小值小，那么没有区间合并操作；如果前一个区间的最大值比后一个区间的最小值大，但比最大值小，那么区间合并成[前一个区间的最小值，后一个区间的最大值]；如果前一个区间的最大值比后一个区间的最大值都大，相当于后一个区间没有用，直接删去。 这样我们就可以得到Solution1，排序复杂度为O(nlogn)，一个for循环，O(n)。一开始我以为算法复杂度是O(nlogn)，但后来我发现错了，因为在数组中删去一个元素erase操作的复杂度为O(n)，所以总复杂度应该是O(n^2)，这样我们非但没有降低到我们想要的复杂度，而且还调用了很多erase操作，还有一个sort操作，还有数组的克隆操作，这样还是蛮慢的，可以预见到算法还有优化的空间。  分析二：
 我们考虑优化分析一，造成Solution1中复杂度升到O(n^2)的原因在于for循环中进行了删除元素的操作。那么我们考虑是否可以先判断完，再添加进answer数组，而不是一开始先复制后删除。 基于这样的考虑，我们可以先把intervals数组排序，然后先比较完是否需要进行合并区间，如果是需要合并的话，因为intervals已经基于区间start值排序了，那么也就是说要添加的新区间的start一定比answer中最后一个元素区间的start值要大，那么我们只需要修改answer中最后一个元素区间的end值；不需要合并的话，就直接把新区间添加进answer数组中即可。 这样我们就可以得到Solution2，复杂度为O(nlogn)。  解法 Solution1：</description>
    </item>
    
    
    
    <item>
      <title>Leetcode18 4Sum</title>
      <link>https://sysucarey.github.io/leetcode18-4sum/</link>
      <pubDate>Sun, 07 Oct 2018 22:33:53 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode18-4sum/</guid>
      <description>题目  链接：  Leetcode18 4Sum
 概述：  Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b+ c + d = target? Find all unique quadruplets in the array which gives the sum of target.
Note:
The solution set must not contain duplicate quadruplets.
Example:
 Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.</description>
    </item>
    
    
    
    <item>
      <title>Leetcode74 Search a 2D Matrix</title>
      <link>https://sysucarey.github.io/leetcode74-search-a-2d-matrix/</link>
      <pubDate>Thu, 04 Oct 2018 21:22:32 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode74-search-a-2d-matrix/</guid>
      <description>题目论述  链接：  Leetcode74 Search a 2D Matrix
 概述：  Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
 Integers in each row are sorted from left to right. The first integer of each row is greater than the last integer of the previous row.  Example 1:
 Input: matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] target = 3 Output: true  Example 2:</description>
    </item>
    
    
    
    <item>
      <title>Leetcode119 Pascal&#39;s Triangle II</title>
      <link>https://sysucarey.github.io/leetcode119-pascals-triangle-ii/</link>
      <pubDate>Tue, 02 Oct 2018 23:20:50 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode119-pascals-triangle-ii/</guid>
      <description>题目论述  链接：  Leetcode119 Pascal&amp;rsquo;s Triangle II
 概述：  Given a non-negative index k where k ≤ 33, return the k th index row of the Pascal&amp;rsquo;s triangle.
Note that the row index starts from 0.
In Pascal&amp;rsquo;s triangle, each number is the sum of the two numbers directly above it.
Example:
 Input: 3 Output: [1,3,3,1]  Follow up:
Could you optimize your algorithm to use only O(k) extra space?</description>
    </item>
    
    
    
    <item>
      <title>Leetcode15 3Sum</title>
      <link>https://sysucarey.github.io/leetcode15-3sum/</link>
      <pubDate>Sun, 30 Sep 2018 22:25:53 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode15-3sum/</guid>
      <description>题目论述  链接：  Leetcode15 3Sum
 概述：  Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Note:
The solution set must not contain duplicate triplets.
Example:
 Given array nums = [-1, 0, 1, 2, -1, -4], A solution set is: [ [-1, 0, 1], [-1, -1, 2] ]  思考分析 分析一：</description>
    </item>
    
    
    
    <item>
      <title>虚拟机CentOS7安装图形化界面&#43;Google Chrome</title>
      <link>https://sysucarey.github.io/%E8%99%9A%E6%8B%9F%E6%9C%BAcentos7%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2-google-chrome/</link>
      <pubDate>Wed, 26 Sep 2018 10:30:53 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/%E8%99%9A%E6%8B%9F%E6%9C%BAcentos7%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2-google-chrome/</guid>
      <description>1. 环境  Windows10
 Virtual Box + CentOS7 虚拟机的相关环境配置
  参照上一篇博客：VirtualBox+CentOS让PC提供桌面云服务
2. 配置虚拟机  图形化界面需要更高的配置，调整虚拟机CPU，内存，显存配置。
 右键虚拟机-&amp;gt;设置-&amp;gt;系统-&amp;gt;处理器，分配2个CPU。
 右键虚拟机-&amp;gt;设置-&amp;gt;系统-&amp;gt;主板，内存分配2GB。
 右键虚拟机-&amp;gt;设置-&amp;gt;显示-&amp;gt;屏幕，显存分配128MB，启用3D加速。
  3. 安装CentOS桌面  命令sudo yum groupinstall &amp;quot;GNOME Desktop&amp;quot;安装桌面。（要大约半个小时这么久）   startx进入图形化界面。   可以配置虚拟机，让鼠标的切入切出虚拟机更人性化。
 先sudo yum install -y kernel-devel gcc，安装kernel-devel 和 gcc。 点击上方设备-&amp;gt;安装增强功能，run。   4. 安装Google Chrome  下载Google Chrome for Linux。  官网可能被墙，国内IP可以移步新浪科技网下载。
选择正式版RPM-新浪本地下载。
 利用yum完成安装  去到下载RPM的目录下，终端输入命令:
sudo yum localinstall google-chrome-stable_current_x86_64.</description>
    </item>
    
    
    
    <item>
      <title>Leetcode11: Container With Most Water</title>
      <link>https://sysucarey.github.io/leetcode11-container-with-most-water/</link>
      <pubDate>Sun, 23 Sep 2018 22:50:53 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/leetcode11-container-with-most-water/</guid>
      <description>题目论述  链接：Leetcode11: Container With Most Water
 概述：
  Given n non-negative integers a1, a2, &amp;hellip;, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.
Note: You may not slant the container and n is at least 2.</description>
    </item>
    
    
    
    <item>
      <title>VirtualBox&#43;CentOS让PC提供桌面云服务</title>
      <link>https://sysucarey.github.io/virtualbox-centos%E8%AE%A9pc%E6%8F%90%E4%BE%9B%E6%A1%8C%E9%9D%A2%E4%BA%91%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 17 Sep 2018 11:15:53 +0800</pubDate>
      
      <guid>https://sysucarey.github.io/virtualbox-centos%E8%AE%A9pc%E6%8F%90%E4%BE%9B%E6%A1%8C%E9%9D%A2%E4%BA%91%E6%9C%8D%E5%8A%A1/</guid>
      <description>实验目的  初步了解虚拟化技术，理解云计算的相关概念
 为后续课程提供统一的编程与实验环境
 理解系统工程师面临的困境
  实验环境  Windows10
 Git for windows
 VictualBox for windows
  步骤流程 1. git for windows 下载 git for windows 官网
2. VirtualBox 下载安装并配置 2.1 官网下载：victualBox 官网 2.2 安装在D盘 2.3 配置VirtualBox  管理-&amp;gt;全局设定-&amp;gt;常规，修改默认虚拟电脑位置：   创建虚拟机内部虚拟网络，使得 Vbox 内部虚拟机可以通过它，实现虚拟机之间、虚拟机与主机的通讯 。
 管理-&amp;gt;主机网络管理器-&amp;gt;创建，创建一块虚拟网卡，把IPv4地址分配为192.168.100.1/24。   在主机Windows终端cmd下，输入ipconfig可以看到自己新创建的网卡VirtualBox Host-Only Network #2。    3. 创建Linux CentOS虚拟机 3.1 CentOS镜像下载 官网下载地址
下载Minimal ISO</description>
    </item>
    
    
  </channel>
</rss>
